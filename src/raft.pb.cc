// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_raft_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Entry;
}  // namespace protobuf_raft_2eproto
class EntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Entry>
      _instance;
} _Entry_default_instance_;
class AppendEntriesArgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesArgs>
      _instance;
} _AppendEntriesArgs_default_instance_;
class AppendEntriesReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesReply>
      _instance;
} _AppendEntriesReply_default_instance_;
class RequestVoteArgsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteArgs>
      _instance;
} _RequestVoteArgs_default_instance_;
class RequestVoteReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteReply>
      _instance;
} _RequestVoteReply_default_instance_;
namespace protobuf_raft_2eproto {
static void InitDefaultsEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Entry_default_instance_;
    new (ptr) ::Entry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Entry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Entry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEntry}, {}};

static void InitDefaultsAppendEntriesArgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AppendEntriesArgs_default_instance_;
    new (ptr) ::AppendEntriesArgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AppendEntriesArgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AppendEntriesArgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAppendEntriesArgs}, {
      &protobuf_raft_2eproto::scc_info_Entry.base,}};

static void InitDefaultsAppendEntriesReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AppendEntriesReply_default_instance_;
    new (ptr) ::AppendEntriesReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AppendEntriesReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppendEntriesReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppendEntriesReply}, {}};

static void InitDefaultsRequestVoteArgs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestVoteArgs_default_instance_;
    new (ptr) ::RequestVoteArgs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestVoteArgs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteArgs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteArgs}, {}};

static void InitDefaultsRequestVoteReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestVoteReply_default_instance_;
    new (ptr) ::RequestVoteReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestVoteReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Entry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesArgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteArgs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteReply.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Entry, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Entry, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesArgs, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesArgs, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesArgs, prevlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesArgs, prevlogterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesArgs, leadercommit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesArgs, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesReply, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesReply, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesReply, conflict_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AppendEntriesReply, startfrom_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestVoteArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestVoteArgs, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestVoteArgs, candidatedid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestVoteArgs, lastlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestVoteArgs, lastlogterm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestVoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestVoteReply, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestVoteReply, votegranted_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Entry)},
  { 7, -1, sizeof(::AppendEntriesArgs)},
  { 18, -1, sizeof(::AppendEntriesReply)},
  { 27, -1, sizeof(::RequestVoteArgs)},
  { 36, -1, sizeof(::RequestVoteReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AppendEntriesArgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AppendEntriesReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RequestVoteArgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RequestVoteReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "raft.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nraft.proto\"#\n\005Entry\022\014\n\004Term\030\001 \001(\005\022\014\n\004D"
      "ata\030\002 \001(\t\"\215\001\n\021AppendEntriesArgs\022\014\n\004Term\030"
      "\001 \001(\005\022\020\n\010LeaderID\030\002 \001(\005\022\024\n\014PrevLogIndex\030"
      "\003 \001(\005\022\023\n\013PrevLogTerm\030\004 \001(\005\022\024\n\014LeaderComm"
      "it\030\005 \001(\005\022\027\n\007Entries\030\006 \003(\0132\006.Entry\"X\n\022App"
      "endEntriesReply\022\014\n\004Term\030\001 \001(\005\022\017\n\007Success"
      "\030\002 \001(\010\022\020\n\010Conflict\030\003 \001(\010\022\021\n\tStartFrom\030\004 "
      "\001(\005\"`\n\017RequestVoteArgs\022\014\n\004Term\030\001 \001(\005\022\024\n\014"
      "CandidatedID\030\002 \001(\005\022\024\n\014LastLogIndex\030\003 \001(\005"
      "\022\023\n\013LastLogTerm\030\004 \001(\005\"5\n\020RequestVoteRepl"
      "y\022\014\n\004Term\030\001 \001(\005\022\023\n\013VoteGranted\030\002 \001(\0102x\n\004"
      "Raft\022:\n\rAppendEntries\022\022.AppendEntriesArg"
      "s\032\023.AppendEntriesReply\"\000\0224\n\013RequestVote\022"
      "\020.RequestVoteArgs\032\021.RequestVoteReply\"\000b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 566);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_raft_2eproto

// ===================================================================

void Entry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entry::kTermFieldNumber;
const int Entry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entry::Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raft_2eproto::scc_info_Entry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Entry)
}
Entry::Entry(const Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:Entry)
}

void Entry::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = 0;
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Entry& Entry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_Entry.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = 0;
  _internal_metadata_.Clear();
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Entry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Entry.Data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // string Data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Entry.Data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Entry)
}

::google::protobuf::uint8* Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // string Data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Entry.Data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Entry)
  return target;
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Entry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Entry)
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesArgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesArgs::kTermFieldNumber;
const int AppendEntriesArgs::kLeaderIDFieldNumber;
const int AppendEntriesArgs::kPrevLogIndexFieldNumber;
const int AppendEntriesArgs::kPrevLogTermFieldNumber;
const int AppendEntriesArgs::kLeaderCommitFieldNumber;
const int AppendEntriesArgs::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesArgs::AppendEntriesArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raft_2eproto::scc_info_AppendEntriesArgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AppendEntriesArgs)
}
AppendEntriesArgs::AppendEntriesArgs(const AppendEntriesArgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadercommit_) -
    reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  // @@protoc_insertion_point(copy_constructor:AppendEntriesArgs)
}

void AppendEntriesArgs::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
}

AppendEntriesArgs::~AppendEntriesArgs() {
  // @@protoc_insertion_point(destructor:AppendEntriesArgs)
  SharedDtor();
}

void AppendEntriesArgs::SharedDtor() {
}

void AppendEntriesArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AppendEntriesArgs::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesArgs& AppendEntriesArgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_AppendEntriesArgs.base);
  return *internal_default_instance();
}


void AppendEntriesArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:AppendEntriesArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadercommit_) -
      reinterpret_cast<char*>(&term_)) + sizeof(leadercommit_));
  _internal_metadata_.Clear();
}

bool AppendEntriesArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AppendEntriesArgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LeaderID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PrevLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 PrevLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prevlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LeaderCommit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leadercommit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Entry Entries = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AppendEntriesArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AppendEntriesArgs)
  return false;
#undef DO_
}

void AppendEntriesArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AppendEntriesArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // int32 LeaderID = 2;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leaderid(), output);
  }

  // int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prevlogindex(), output);
  }

  // int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prevlogterm(), output);
  }

  // int32 LeaderCommit = 5;
  if (this->leadercommit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leadercommit(), output);
  }

  // repeated .Entry Entries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->entries(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AppendEntriesArgs)
}

::google::protobuf::uint8* AppendEntriesArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AppendEntriesArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // int32 LeaderID = 2;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leaderid(), target);
  }

  // int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prevlogindex(), target);
  }

  // int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prevlogterm(), target);
  }

  // int32 LeaderCommit = 5;
  if (this->leadercommit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leadercommit(), target);
  }

  // repeated .Entry Entries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendEntriesArgs)
  return target;
}

size_t AppendEntriesArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppendEntriesArgs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Entry Entries = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // int32 LeaderID = 2;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 PrevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogindex());
  }

  // int32 PrevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->prevlogterm());
  }

  // int32 LeaderCommit = 5;
  if (this->leadercommit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leadercommit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesArgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AppendEntriesArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AppendEntriesArgs)
    MergeFrom(*source);
  }
}

void AppendEntriesArgs::MergeFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppendEntriesArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.prevlogindex() != 0) {
    set_prevlogindex(from.prevlogindex());
  }
  if (from.prevlogterm() != 0) {
    set_prevlogterm(from.prevlogterm());
  }
  if (from.leadercommit() != 0) {
    set_leadercommit(from.leadercommit());
  }
}

void AppendEntriesArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesArgs::CopyFrom(const AppendEntriesArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppendEntriesArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesArgs::IsInitialized() const {
  return true;
}

void AppendEntriesArgs::Swap(AppendEntriesArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesArgs::InternalSwap(AppendEntriesArgs* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(term_, other->term_);
  swap(leaderid_, other->leaderid_);
  swap(prevlogindex_, other->prevlogindex_);
  swap(prevlogterm_, other->prevlogterm_);
  swap(leadercommit_, other->leadercommit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppendEntriesArgs::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesReply::kTermFieldNumber;
const int AppendEntriesReply::kSuccessFieldNumber;
const int AppendEntriesReply::kConflictFieldNumber;
const int AppendEntriesReply::kStartFromFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesReply::AppendEntriesReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raft_2eproto::scc_info_AppendEntriesReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&startfrom_) -
    reinterpret_cast<char*>(&term_)) + sizeof(startfrom_));
  // @@protoc_insertion_point(copy_constructor:AppendEntriesReply)
}

void AppendEntriesReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startfrom_) -
      reinterpret_cast<char*>(&term_)) + sizeof(startfrom_));
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:AppendEntriesReply)
  SharedDtor();
}

void AppendEntriesReply::SharedDtor() {
}

void AppendEntriesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AppendEntriesReply::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesReply& AppendEntriesReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_AppendEntriesReply.base);
  return *internal_default_instance();
}


void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&startfrom_) -
      reinterpret_cast<char*>(&term_)) + sizeof(startfrom_));
  _internal_metadata_.Clear();
}

bool AppendEntriesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AppendEntriesReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool Conflict = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &conflict_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 StartFrom = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startfrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AppendEntriesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AppendEntriesReply)
  return false;
#undef DO_
}

void AppendEntriesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // bool Success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // bool Conflict = 3;
  if (this->conflict() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->conflict(), output);
  }

  // int32 StartFrom = 4;
  if (this->startfrom() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->startfrom(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AppendEntriesReply)
}

::google::protobuf::uint8* AppendEntriesReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // bool Success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // bool Conflict = 3;
  if (this->conflict() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->conflict(), target);
  }

  // int32 StartFrom = 4;
  if (this->startfrom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->startfrom(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppendEntriesReply)
  return target;
}

size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppendEntriesReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // bool Success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // bool Conflict = 3;
  if (this->conflict() != 0) {
    total_size += 1 + 1;
  }

  // int32 StartFrom = 4;
  if (this->startfrom() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->startfrom());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AppendEntriesReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AppendEntriesReply)
    MergeFrom(*source);
  }
}

void AppendEntriesReply::MergeFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.conflict() != 0) {
    set_conflict(from.conflict());
  }
  if (from.startfrom() != 0) {
    set_startfrom(from.startfrom());
  }
}

void AppendEntriesReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {
  return true;
}

void AppendEntriesReply::Swap(AppendEntriesReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(success_, other->success_);
  swap(conflict_, other->conflict_);
  swap(startfrom_, other->startfrom_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppendEntriesReply::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteArgs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteArgs::kTermFieldNumber;
const int RequestVoteArgs::kCandidatedIDFieldNumber;
const int RequestVoteArgs::kLastLogIndexFieldNumber;
const int RequestVoteArgs::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteArgs::RequestVoteArgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raft_2eproto::scc_info_RequestVoteArgs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestVoteArgs)
}
RequestVoteArgs::RequestVoteArgs(const RequestVoteArgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:RequestVoteArgs)
}

void RequestVoteArgs::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

RequestVoteArgs::~RequestVoteArgs() {
  // @@protoc_insertion_point(destructor:RequestVoteArgs)
  SharedDtor();
}

void RequestVoteArgs::SharedDtor() {
}

void RequestVoteArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestVoteArgs::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteArgs& RequestVoteArgs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_RequestVoteArgs.base);
  return *internal_default_instance();
}


void RequestVoteArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestVoteArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear();
}

bool RequestVoteArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestVoteArgs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 CandidatedID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidatedid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LastLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 LastLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestVoteArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestVoteArgs)
  return false;
#undef DO_
}

void RequestVoteArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestVoteArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // int32 CandidatedID = 2;
  if (this->candidatedid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->candidatedid(), output);
  }

  // int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lastlogindex(), output);
  }

  // int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastlogterm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RequestVoteArgs)
}

::google::protobuf::uint8* RequestVoteArgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RequestVoteArgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // int32 CandidatedID = 2;
  if (this->candidatedid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->candidatedid(), target);
  }

  // int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lastlogindex(), target);
  }

  // int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastlogterm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestVoteArgs)
  return target;
}

size_t RequestVoteArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestVoteArgs)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // int32 CandidatedID = 2;
  if (this->candidatedid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->candidatedid());
  }

  // int32 LastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogindex());
  }

  // int32 LastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastlogterm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteArgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteArgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteArgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestVoteArgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestVoteArgs)
    MergeFrom(*source);
  }
}

void RequestVoteArgs::MergeFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestVoteArgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.candidatedid() != 0) {
    set_candidatedid(from.candidatedid());
  }
  if (from.lastlogindex() != 0) {
    set_lastlogindex(from.lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    set_lastlogterm(from.lastlogterm());
  }
}

void RequestVoteArgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteArgs::CopyFrom(const RequestVoteArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestVoteArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteArgs::IsInitialized() const {
  return true;
}

void RequestVoteArgs::Swap(RequestVoteArgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteArgs::InternalSwap(RequestVoteArgs* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(candidatedid_, other->candidatedid_);
  swap(lastlogindex_, other->lastlogindex_);
  swap(lastlogterm_, other->lastlogterm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestVoteArgs::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteReply::kTermFieldNumber;
const int RequestVoteReply::kVoteGrantedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteReply::RequestVoteReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raft_2eproto::scc_info_RequestVoteReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestVoteReply)
}
RequestVoteReply::RequestVoteReply(const RequestVoteReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&votegranted_) -
    reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  // @@protoc_insertion_point(copy_constructor:RequestVoteReply)
}

void RequestVoteReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
}

RequestVoteReply::~RequestVoteReply() {
  // @@protoc_insertion_point(destructor:RequestVoteReply)
  SharedDtor();
}

void RequestVoteReply::SharedDtor() {
}

void RequestVoteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestVoteReply::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteReply& RequestVoteReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_RequestVoteReply.base);
  return *internal_default_instance();
}


void RequestVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&votegranted_) -
      reinterpret_cast<char*>(&term_)) + sizeof(votegranted_));
  _internal_metadata_.Clear();
}

bool RequestVoteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestVoteReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool VoteGranted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votegranted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestVoteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestVoteReply)
  return false;
#undef DO_
}

void RequestVoteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->votegranted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RequestVoteReply)
}

::google::protobuf::uint8* RequestVoteReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->votegranted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestVoteReply)
  return target;
}

size_t RequestVoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestVoteReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 Term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->term());
  }

  // bool VoteGranted = 2;
  if (this->votegranted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestVoteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestVoteReply)
    MergeFrom(*source);
  }
}

void RequestVoteReply::MergeFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.votegranted() != 0) {
    set_votegranted(from.votegranted());
  }
}

void RequestVoteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteReply::CopyFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReply::IsInitialized() const {
  return true;
}

void RequestVoteReply::Swap(RequestVoteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteReply::InternalSwap(RequestVoteReply* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(votegranted_, other->votegranted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestVoteReply::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Entry* Arena::CreateMaybeMessage< ::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::Entry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AppendEntriesArgs* Arena::CreateMaybeMessage< ::AppendEntriesArgs >(Arena* arena) {
  return Arena::CreateInternal< ::AppendEntriesArgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AppendEntriesReply* Arena::CreateMaybeMessage< ::AppendEntriesReply >(Arena* arena) {
  return Arena::CreateInternal< ::AppendEntriesReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RequestVoteArgs* Arena::CreateMaybeMessage< ::RequestVoteArgs >(Arena* arena) {
  return Arena::CreateInternal< ::RequestVoteArgs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RequestVoteReply* Arena::CreateMaybeMessage< ::RequestVoteReply >(Arena* arena) {
  return Arena::CreateInternal< ::RequestVoteReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
